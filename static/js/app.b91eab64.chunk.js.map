{"version":3,"sources":["slices/navSlice.js","components/NavOptions.js","components/NavFavourites.js","screens/HomeScreen.js","store.js","components/Map.js","components/NavigateCard.js","components/RideOptionsCard.js","screens/MapScreen.js","App.js"],"names":["navSlice","createSlice","name","initialState","origin","destination","travelTimeInformation","reducers","setOrigin","state","action","payload","setDestination","setTravelTimeInformation","actions","selectOrigin","nav","selectDestination","selectTravelTimeInformation","data","id","title","image","screen","NavOption","navigation","useNavigation","useSelector","FlatList","horizontal","keyExtractor","item","renderItem","TouchableOpacity","onPress","navigate","style","tw","disabled","View","Image","width","height","resizeMode","source","uri","Text","color","type","icon","location","NavFavourites","dispatch","useDispatch","locationHome","ItemSeparatorComponent","fetch","then","response","json","lat","results","geometry","lng","description","size","HomeScreen","StyleSheet","create","SafeAreaView","marginLeft","GooglePlacesAutocomplete","onFail","error","console","placeholder","styles","container","flex","textInput","fontSize","details","fetchDetails","returnKeyType","enablePoweredByContainer","minLength","query","key","language","nearbyPlacesAPI","debounce","store","backgroundColor","alignItems","justifyContent","configureStore","reducer","navReducer","Map","mapRef","useRef","useEffect","current","fitToSuppliedMarkers","edgePadding","top","right","buttom","left","a","async","res","rows","elements","ref","mapType","initialRegion","latitude","longitude","latitudeDelta","longitudeDelta","apikey","strokeWidth","strokeColor","coordinate","identifier","NavigateCard","toInputBoxStyles","paddingTop","borderRadius","textInputContainer","paddingHorizontal","paddingBottom","multiplier","RideOptionsCard","useState","selected","setSelected","distance","text","duration","Intl","NumberFormat","currency","format","value","log","MapScreen","Stack","createNativeStackNavigator","Icon","Navigator","Screen","component","options","headerShown","App","NavigationContainer","KeyboardAvoidingView","behavior","Platform","OS","keyboardVerticalOffset","os"],"mappings":"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","file":"static/js/app.b91eab64.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    origin: null,\n    destination: null,\n    travelTimeInformation: null\n}\n\nexport const navSlice = createSlice({\n    name: 'nav',\n    initialState,\n    reducers: {\n        setOrigin: (state, action) => {\n            state.origin = action.payload;\n        },\n        setDestination: (state, action) => {\n            state.destination = action.payload;\n        },\n        setTravelTimeInformation: (state, action) => {\n            state.travelTimeInformation = action.payload;\n        },\n    },\n});\n\nexport const { setOrigin, setDestination, setTravelTimeInformation } = navSlice.actions;\n\n//Selector\nexport const selectOrigin = (state) => state.nav.origin;\nexport const selectDestination = (state) => state.nav.destination;\nexport const selectTravelTimeInformation = (state) => state.nav.travelTimeInformation;\n\nexport default navSlice.reducer;\n","import { useNavigation } from \"@react-navigation/native\";\nimport React from \"react\";\nimport { Text, View, Image, FlatList, TouchableOpacity } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\nimport { useSelector } from \"react-redux\";\nimport tw from \"tailwind-react-native-classnames\"\nimport { selectOrigin } from \"../slices/navSlice\";\n\nconst data = [\n    {\n        id: \"123\",\n        title: \"Get a ride \",\n        image: \"https://links.papareact.com/3pn\",\n        screen: \"MapScreen\",\n    },\n    {\n        id: \"456\",\n        title: \"Ordre Food \",\n        image: \"https://links.papareact.com/28w\",\n        screen: \"EatScreen\",\n    },\n];\n\nconst NavOption = () => {\n    const navigation = useNavigation();\n    const origin = useSelector(selectOrigin)\n\n    return (\n        <FlatList\n            data={data}\n            horizontal\n            keyExtractor={(item) => item.id}\n            renderItem={({ item }) => (\n                <TouchableOpacity\n                    onPress={() => navigation.navigate(item.screen) }\n                    style={tw`p-2 pl-6 pb-8 pt-4 bg-gray-200 m-2 w-40`}\n                    disabled={!origin}\n                >\n                    <View style={tw`${!origin && \"opacity-20\"}`}>\n                        <Image\n                        style={{ width: 120, height: 120, resizeMode: \"contain\"}}\n                        source={{uri: item.image }}\n                        />\n                        <Text style={tw`mt-2 text-lg font-semibold`}>{item.title}</Text>\n                        <Icon\n                            style={tw`p-2 bg-black rounded-full w-10 mt-4`}\n                            name=\"arrowright\" color=\"white\" type=\"antdesign\" \n                        />\n                    </View>\n                </TouchableOpacity>\n            )}\n        />\n    )\n}\n\nexport default NavOption;","import { TouchableOpacity, FlatList, StyleSheet, Text, View } from 'react-native'\nimport React from 'react'\nimport { Icon } from \"react-native-elements\"\nimport tw from \"tailwind-react-native-classnames\"\nimport { useDispatch } from 'react-redux'\nimport { useNavigation } from '@react-navigation/native'\nimport { setDestination } from '../slices/navSlice'\nimport { GOOGLE_MAPS_APIKEY } from \"@env\"\n\nconst data = [\n    {\n        id: \"123\",\n        icon: \"home\",\n        location: \"Home\",\n        destination: \"afarsek 3 ashdod israel\",\n    },\n    {\n        id:\"456\",\n        icon:\"briefcase\",\n        location: \"Work\",\n        destination: \"London Eye, London, UK\"\n    },\n];\n\n\nconst NavFavourites = () => {\n    const dispatch = useDispatch();\n    const navigation = useNavigation();\n    var locationHome = null;\n  return (\n    <FlatList \n        data={data} \n        keyExtractor={(item) => item.id}\n        ItemSeparatorComponent={() => (\n            <View style={[tw`bg-gray-200`, { height: 0.5} ]} /> )}\n        \n        renderItem={({item: {location, destination, icon}}) => (\n            <TouchableOpacity \n            onPress={(data, details = null) => {\n\n                fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${destination}&key=${GOOGLE_MAPS_APIKEY}&language=en`)\n                .then((response) => response.json())\n                .then((data) => {\n\n                  locationHome = {  lat: data.results[0].geometry.location.lat,\n                                    lng: data.results[0].geometry.location.lng\n                                }\n                            })\n                \n                dispatch(\n                    setDestination({\n                    location: locationHome,\n                    description: destination,\n                    }))\n                navigation.navigate('RideOptionsCard')\n                \n            }}\n            \n            style={tw`flex-row items-center p-5`}>\n                <Icon\n                    style={tw`mr-4 rounded-full bg-gray-400 p-3`}\n                    name={icon}\n                    type=\"ionicon\"\n                    color=\"white\"\n                    size={18}\n                />\n                \n                <View>\n                    <Text style={tw`font-semibold text-lg`}>{location}</Text>\n                    <Text style={tw`text-gray-500`}>{destination}</Text>\n                </View>\n            </TouchableOpacity>\n        )}\n    />\n  );\n};\n\nexport default NavFavourites;\n\nconst styles = StyleSheet.create({})","import React from 'react'\nimport { StyleSheet, Text, View, SafeAreaView, Image} from 'react-native'\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\nimport tw from 'tailwind-react-native-classnames'\nimport NavOption from '../components/NavOptions';\nimport { GOOGLE_MAPS_APIKEY } from \"@env\";\nimport { useDispatch } from 'react-redux';\nimport { setDestination, setOrigin } from '../slices/navSlice'\nimport NavFavourites from '../components/NavFavourites';\n\nconst HomeScreen = () => {\n    const dispatch = useDispatch();\n\n    return (\n        <SafeAreaView style={tw`bg-white h-full`}>\n            <View>\n                <Image\n                    style={{\n                        width: 100, \n                        height: 100, \n                        marginLeft: 10,\n                        resizeMode: \"contain\"\n                    }}\n                    source={{\n                        uri: \"https://links.papareact.com/gzs\",\n                    }}\n                />\n                <GooglePlacesAutocomplete \n                    onFail={error => console.error(error)}\n\n                    placeholder='Where From Are?'\n                    styles={{\n                        container: {\n                            flex: 0,\n                        },\n                        textInput: {\n                            fontSize: 18,\n                        },\n                    }}\n                    onPress={(data, details = null) => {\n                        dispatch(\n                            setOrigin({\n                            location: details.geometry.location,\n                            description: data.description,\n                            })\n                        );\n                        dispatch(setDestination(null));\n                    }}\n                    fetchDetails={true}\n                    returnKeyType={\"search\"}\n                    enablePoweredByContainer={false}\n                    minLength={2}\n                    query={{\n                        key: GOOGLE_MAPS_APIKEY,\n                        language: 'en',\n                    }}\n                    nearbyPlacesAPI='GooglePlacesSearch'\n                    debounce={400}\n                \n                />\n\n                <NavOption/>\n\n                <NavFavourites />\n\n            </View>\n        </SafeAreaView>\n    );\n};\n\nexport default HomeScreen;\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: \"#fff\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n    }\n})","import { configureStore } from \"@reduxjs/toolkit\";\nimport navReducer from \"./slices/navSlice\";\n\nexport const store = configureStore({\n    reducer: {\n        nav: navReducer,\n    },\n});\n","import React, { useEffect, useRef } from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport navSlice, { selectDestination, selectOrigin, setTravelTimeInformation } from \"../slices/navSlice\";\nimport MapView, { Marker } from 'react-native-maps';\nimport tw from \"tailwind-react-native-classnames\"\nimport MapViewDirections from \"react-native-maps-directions\";\nimport { GOOGLE_MAPS_APIKEY } from \"@env\"\n\nconst Map = () => {\n    const origin = useSelector(selectOrigin)\n    const destination = useSelector(selectDestination)\n    const mapRef = useRef(null);\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        if (!origin || !destination) return;\n        \n        mapRef.current.fitToSuppliedMarkers(['origin', 'destination'], {\n            edgePadding: {top:50, right:50, buttom:50, left:50 },\n        });\n\n    }, [origin, destination])\n\n    useEffect(() => {\n        if (!origin || !destination) return;\n\n        const getTravelTime = async() => {\n            fetch(`https://maps.googleapis.com/maps/api/distancematrix/json?units=metric&origins=${origin.description}&destinations=${destination.description}&key=${GOOGLE_MAPS_APIKEY}&language=en`)\n            .then((res) => res.json())\n            .then((data) => {\n                dispatch(setTravelTimeInformation(data.rows[0].elements[0]))\n            })\n            \n        };\n\n        getTravelTime()\n    },[origin, destination, GOOGLE_MAPS_APIKEY])\n\n    return (\n            <MapView\n                ref={mapRef}\n                style={tw`flex-1`}\n                mapType=\"mutedStandard\"\n                initialRegion={{\n                    latitude: origin.location.lat,\n                    longitude: origin.location.lng,\n                    latitudeDelta: 0.005,\n                    longitudeDelta: 0.005,\n                }}\n            >\n                {origin && destination && (\n                    <MapViewDirections\n                        origin={origin.description}\n                        destination={destination.description}\n                        apikey={GOOGLE_MAPS_APIKEY}\n                        strokeWidth={3}\n                        strokeColor=\"black\"\n                    />\n                )}\n\n\n                {origin?.location && (\n                    <Marker \n                        coordinate={{\n                            latitude: origin.location.lat,\n                            longitude: origin.location.lng,\n                        }}\n                        title=\"Origin\"\n                        description={origin.description}\n                        identifier=\"origin\"\n                    />\n                )}\n\n                {destination?.location && (\n                    <Marker \n                        coordinate={{\n                            latitude: destination.location.lat,\n                            longitude: destination.location.lng,\n                        }}\n                        title=\"Destination\"\n                        description={destination.description}\n                        identifier=\"destination\"\n                    />\n                )}  \n            </MapView>\n    );\n}\n\nexport default Map;\n\nconst styles = StyleSheet.create({})\n","import { StyleSheet, Text, View, SafeAreaView, TouchableOpacity } from 'react-native'\nimport React from 'react'\nimport tw from \"tailwind-react-native-classnames\"\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete'\nimport { GOOGLE_MAPS_APIKEY } from \"@env\"\nimport { setDestination } from '../slices/navSlice'\nimport { useDispatch } from 'react-redux'\nimport { useNavigation } from '@react-navigation/native'\nimport NavFavourites from './NavFavourites'\nimport { Icon } from \"react-native-elements\"\n\nconst NavigateCard = () => {\n    const dispatch = useDispatch();\n    const navigation = useNavigation();\n\n\n  return (\n    <SafeAreaView style={tw`bg-white flex-1`}>\n      <Text style={tw`text-center py-5 text-xl`}>Good Morning</Text>\n      <View style={tw`border-t border-gray-200 flex-shrink`}>\n        <View>\n            <GooglePlacesAutocomplete \n                placeholder='Where to?'\n                styles={toInputBoxStyles}\n                fetchDetails={true}\n                returnKeyType={\"search\"}\n                minLength={2}\n                onPress={(data, details = null) => {\n                    dispatch(\n                        setDestination({\n                        location: details.geometry.location,\n                        description: data.description,\n                        }))\n                    \n                    navigation.navigate('RideOptionsCard')\n                    \n                }}\n                enablePoweredByContainer={false}\n                query={{\n                    key: GOOGLE_MAPS_APIKEY,\n                    language: 'en',\n                }}\n                nearbyPlacesAPI='GooglePlacesSearch'\n                debounce={400}\n            />\n        </View>\n            <NavFavourites />\n\n      </View>\n      <View style={tw`flex-row bg-white justify-evenly py-2 mt-auto border-t border-gray-100`}>\n        <TouchableOpacity \n            onPress={() => navigation.navigate(\"RideOptionsCard\")}\n            style={tw`flex flex-row justify-between bg-black w-24 px-4 py-3 rounded-full`} >\n            <Icon name=\"car\" type=\"font-awesome\" color=\"white\" size={16} />\n            <Text style={tw`text-white text-center`}>Rides</Text>\n        </TouchableOpacity>\n        \n        <TouchableOpacity style={tw`flex flex-row justify-between bg-black w-24 px-4 py-3 rounded-full`} >\n            <Icon name=\"car\" type=\"font-awesome\" color=\"white\" size={16} />\n            <Text style={tw`text-white text-center`}>Eats</Text>\n        </TouchableOpacity>\n\n      </View>\n    </SafeAreaView>\n  )\n}\n\nexport default NavigateCard\n\nconst toInputBoxStyles = StyleSheet.create({\n    container: {\n        backgroundColor: \"white\",\n        paddingTop: 20,\n        flex: 0\n    },\n    textInput: {\n        backgroundColor: \"#DDDDDF\",\n        borderRadius: 0,\n        fontSize: 18,\n    },\n    textInputContainer: {\n        paddingHorizontal: 20,\n        paddingBottom: 0,\n    }\n})","import { Image, StyleSheet, Text, View, SafeAreaView, TouchableOpacity} from 'react-native'\nimport React, { useState } from 'react'\nimport tw from \"tailwind-react-native-classnames\"\nimport { FlatList } from 'react-native-gesture-handler'\nimport { Icon } from \"react-native-elements\"\nimport { useNavigation } from '@react-navigation/native'\nimport { useSelector } from 'react-redux'\nimport { selectTravelTimeInformation } from '../slices/navSlice'\n\nconst data = [\n  {\n    id: \"Uber-X-123\",\n    title: \"UberX\",\n    multiplier: 1,\n    image: \"https://links.papareact.com/3pn\"\n  },\n  {\n    id: \"Uber-XL-456\",\n    title: \"UberXL\",\n    multiplier: 1.2,\n    image: \"https://links.papareact.com/5w8\"\n  },\n  {\n    id: \"Uber-LUX-789\",\n    title: \"Uber LUX\",\n    multiplier: 1.75,\n    image: \"https://links.papareact.com/7pf\"\n  },\n];\n\nconst RideOptionsCard = () => {\n  const navigation = useNavigation();\n  const [selected, setSelected ] = useState(null);\n  const travelTimeInformation = useSelector(selectTravelTimeInformation);\n  const SURGE_CHARGE_RATE = 1.5\n\n  return (\n    <SafeAreaView style={tw`bg-white flex-grow`}>\n      <View>\n        <TouchableOpacity \n        onPress={() => navigation.navigate(\"NavigateCard\")}\n        style={tw`absolute top-1 left-5 z-50 p-3 rounded-full`} >\n          <Icon name=\"chevron-left\" type=\"fontawesome\" />\n        </TouchableOpacity>\n        <Text style={tw`text-center py-3 text-xl`} >Select A Ride - {travelTimeInformation?.distance?.text} </Text>\n      </View>\n\n      <FlatList \n      data={data}\n      keyExtractor={(item) => item.id}\n      renderItem={({item:{ id, title, multiplier, image}, item}) => (\n        <TouchableOpacity \n        onPress={() => setSelected(item)}\n        style={tw`flex-row justify-between items-center px-10 ${id === selected?.id && \"bg-gray-200\"}`}>\n          <Image \n          style={{\n            width: 100,\n            height: 100,\n            resizeMode: \"contain\",\n          }}\n          source={{ uri: image }}\n          />\n          <View style={tw`-ml-6`}>\n            <Text style={tw`text-xl font-semibold`}>{title}</Text>\n            <Text>{travelTimeInformation?.duration?.text} Travel Time</Text>\n          </View>\n          <Text style={tw`text-xl`}> \n            {new Intl.NumberFormat(`il-IL`, {\n              style: 'currency',\n              currency: 'ILS',\n            }).format(\n                (travelTimeInformation?.duration?.value * SURGE_CHARGE_RATE * multiplier) / 100\n            \n            \n            )}\n          \n           </Text>\n        </TouchableOpacity>\n      )}\n    />\n    <View>\n          <TouchableOpacity \n                      onPress={() => console.log(SURGE_CHARGE_RATE)}\n                      style={tw`bg-black py-3 m-3 ${!selected && 'bg-gray-300'}`}>\n            <Text \n            style={tw`text-center text-white text-xl`}>Choose {selected?.title} </Text>\n          </TouchableOpacity>\n\n    </View>\n\n    </SafeAreaView>\n    \n    );\n};\n\nexport default RideOptionsCard\n\nconst styles = StyleSheet.create({})","import React from 'react'\nimport { StyleSheet, Text, View, SafeAreaView, Image, TouchableOpacity} from 'react-native'\nimport tw from \"tailwind-react-native-classnames\"\nimport Map from '../components/Map'\nimport MapView from 'react-native-maps';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { StackActions, useNavigation } from '@react-navigation/native';\nimport NavigateCard from '../components/NavigateCard';\nimport RideOptionsCard from '../components/RideOptionsCard';\nimport { Icon } from 'react-native-elements/dist/icons/Icon';\n\nconst MapScreen = () => {\n    const Stack = createNativeStackNavigator()\n    const navigation = useNavigation();\n    \n    return (\n            <View>\n                <TouchableOpacity \n                onPress={() => navigation.navigate('HomeScreen')}\n                style={tw`bg-gray-100 absolute top-16 left-8 z-50 p-3 rounded-full shadow-lg`}>\n                    <Icon name=\"menu\" />\n                </TouchableOpacity>\n\n\n                <View style={tw`h-1/2`}>\n                    <Map/>\n                </View>\n\n                <View style={tw`h-1/2`}>\n                    <Stack.Navigator>\n                    <Stack.Screen\n                        name='NavigateCard'\n                        component={NavigateCard} \n                        options={{\n                            headerShown: false,\n                        }}\n                    />\n                    <Stack.Screen\n                        name='RideOptionsCard'\n                        component={RideOptionsCard} \n                        options={{\n                            headerShown: false,\n                        }}\n                    />\n                    </Stack.Navigator>\n                </View>\n\n            </View>\n    );\n};\n\nexport default MapScreen\n\nconst styles = StyleSheet.create({})","import React from \"react\";\nimport { KeyboardAvoidingView, StyleSheet, Platform, Text, View } from 'react-native';\nimport { Provider } from \"react-redux\"\nimport HomeScreen from \"./screens/HomeScreen\";\nimport { store } from \"./store\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\nimport 'react-native-gesture-handler'\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport MapScreen from \"./screens/MapScreen\";\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\nimport { GOOGLE_MAPS_APIKEY } from \"@env\";\n\nexport default function App() {\n  const Stack = createNativeStackNavigator();\n\n  return ( \n    <Provider store={store} >\n      <NavigationContainer>\n      <SafeAreaProvider>\n        <KeyboardAvoidingView \n          behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n          style={{flex: 1}}\n          keyboardVerticalOffset={Platform.os === \"ios\" ? -64 : 0}\n        >\n          <Stack.Navigator>\n            <Stack.Screen\n              name='HomeScreen' component={HomeScreen} options={{\n                headerShown: false,\n              }}\n              />\n              <Stack.Screen\n              name='MapScreen' component={MapScreen} options={{\n                headerShown: false,\n              }}\n              />\n          </Stack.Navigator>\n        </KeyboardAvoidingView>\n      </SafeAreaProvider>\n      </NavigationContainer>\n    </Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"],"sourceRoot":""}